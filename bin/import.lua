local FS = require("bin/fs")
local Stack = require("bin/stack")
local String = require("bin/string")

local Imports = {

}

--[[
  Returns a collection of absolute paths which the `path`
  argument could potentially be referring to.
]]
function Imports.get_potential_import_paths(path)
  local paths = {
    path,
    String.substring(FS.join_directories(LUNA.meta.directory, path), 1, -1),
    String.substring(FS.join_directories(LUNA.script.directory, path), 1, -1),
    String.substring(FS.join_directories(LUNA.meta.directory, "lib", path), 1, -1),
    String.substring(FS.join_directories(LUNA.script.directory, "lib", path), 1, -1)
  }

  for i=#paths, 1, -1 do
    table.insert(paths, paths[i] .. ".lua")
    table.insert(paths, paths[i] .. ".luna")
  end
  return paths
end

--[[
  Returns a boolean which determines if the Lua/Luna script
  at the specified path (or one of its potential paths) has
  been previously imported during the current runtime session.
]]
function Imports.is_imported(path)
  for i=1, #Imports do
    if (Imports[i] == path) then
      return true
    end
  end
  return false
end

--[[
  Attempts to execute the Lua/Luna script at the specified
  path, or the paths generated by `Imports.get_potential_import_paths(path)`
  if the `path` could not be found.
]]
function Imports.import(path)
  if (type(path) ~= "string") then
    return error("Expected string!")
  elseif (Imports.is_imported(path)) then
    return false
  end

  local potential_absolute_paths = Imports.get_potential_import_paths(path)
  for i,v in ipairs(potential_absolute_paths) do
    if (FS.exists(v)) then
      local layer = Stack.push({})
      table.insert(Imports, path)
      local imported = dofile(v)
      Stack.pop()
      return imported
    end
  end
  return error("Error locating file '" .. path .. "'\nAttempted look-up at:\n" .. ( (function()local i="";for k,v in pairs(potential_absolute_paths)do i=i.."\t"..v.."\n" end return i end)() ))
end

return Imports
