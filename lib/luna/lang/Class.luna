import "lib/luna/lang/Object.luna"

rawclass "Class" {

  __prototype = {},

	new = function(self, identifier, prototype)
		self.identifier = identifier
    self.prototype = prototype or {}

    for k,v in pairs(prototype.static or {}) do
      self[k] = v
    end

    prototype.static = nil
    self.prototype = prototype
    self.metadata = {
      class = class
    }

    set(identifier, self)
    return self
	end,

  --[[
    [Doc]
    Creates a new instance of the class represented by this
    Class object, and returns it, using varargs as the
    arguments to the constructor invokation.
  ]]
	instantiate = function(self, ...)
		local instance = new(LUNA.Object.Object)
		for k,v in pairs(self.__prototype) do
			instance[k] = v
		end

		instance:constructor(...)
		return instance
	end,

	getIdentifier = function(self)
		return self.identifier
	end,

  getPrototype = function(self)
    return self.prototype
  end

}
